@page "/"
@inject IToastService toastService
@using SurfsUpLibrary.Models.Repositories
@using SurfsUpLibrary.Models

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

<WeatherCast WeatherDate="weatherDate"></WeatherCast>

<button class="btn btn-info" @onclick="@(() => toastService.ShowInfo("Info Message"))"> Info Toast</button>
<button class="btn btn-success" @onclick="@(() => toastService.ShowSuccess("Successs Message"))"> Success Toast</button>
<button class="btn btn-warning" @onclick="@(() => toastService.ShowWarning("Warning Message"))"> Info Toast</button>
<button class="btn btn-danger" @onclick="@(() => toastService.ShowError("Error Message"))"> Info Toast</button>

@if (user is not null)
{
    <h3>@user.Identity.Name</h3>
    <div class="m-2 p-2">
        Is Authenticated: @user.Identity.IsAuthenticated
    </div>
    <div class="m-2 p-2">
        Authentication Type: @user.Identity.AuthenticationType
    </div>
    <div class="m-2 p-2">
        Admin Role: @user.IsInRole("Admin")
    </div>
    <div class="m-2 p-2">
        <h5>Claims</h5>
        @foreach (var claim in user.Claims)
        {
            <span>
                @claim.Type
            </span>
            <span>:</span>
            <span>
                @claim.Value
            </span>
            <br />
        }
    </div>
}
else
{
    <div class="m-2 p-2">
        No User Exists
    </div>
}

@code {
    WeatherDate weatherDate;

    [CascadingParameter] public Task<AuthenticationState> AuthTask { get; set; }

    private System.Security.Claims.ClaimsPrincipal user;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthTask;
        this.user = authState.User;
        weatherDate = new();
    }
}