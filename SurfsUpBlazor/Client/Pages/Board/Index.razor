@using Microsoft.AspNetCore.Components.Authorization;
@using SurfsUpLibrary.Models;
@using System.Text.Json;
@using SurfsUpLibrary.Models.Repositories;
@using System.Linq.Expressions
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject AuthenticationStateProvider AuthenticationStateProvider
@page "/Boards"

<h1>Boards</h1>

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        Find ved navn & type  <input type="text" style="margin-left: 10px; display: inline-block; width: 200px; vertical-align: middle" class="form-control" name="SearchString" @*value="@ViewData[" CurrentFilter"]"*@ />
        <input type="submit" value="Søg" style="vertical-align: middle" class="btn btn-outline-primary" />
        @if (IsAdmin())
        {
            <a href="/Boards/Create" style="float: right; margin-right: 10px" class="btn btn-success">Tilføj ny</a>
        }
    </div>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                <label>
                    <CustomLabel TItem="Board" aspfor="@nameof(board.Image)"></CustomLabel>
               </label>
            </th>
            <th>
                <label>
                    <CustomLabel TItem="Board" aspfor="@nameof(board.Name)"></CustomLabel>
                </label>
            </th>
            <th>
                <label>
                    <CustomLabel TItem="Board" aspfor="@nameof(board.Length)"></CustomLabel>
                </label>
            </th>
            <th>
                <label>
                    <CustomLabel TItem="Board" aspfor="@nameof(board.Width)"></CustomLabel>
                </label>
            </th>
            <th>
                <label>
                    <CustomLabel TItem="Board" aspfor="@nameof(board.Thickness)"></CustomLabel>
                </label>
            </th>
            <th>
                <label>
                    <CustomLabel TItem="Board" aspfor="@nameof(board.Volume)"></CustomLabel>
                </label>
            </th>
            <th>
                <label>
                    <CustomLabel TItem="Board" aspfor="@nameof(board.Price)"></CustomLabel>
                </label>
            </th>
            <th>
                <label>
                    <CustomLabel TItem="Board" aspfor="@nameof(board.Type)"></CustomLabel>
                </label>
            </th>
            <th>
                <label>
                    <CustomLabel TItem="Board" aspfor="@nameof(board.Equipment)"></CustomLabel>
                </label>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in boards)
        {
            @if (IsAdmin() || !item.IsRented())
            {
                @if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated || item.Id % 2 == 0) //item.Id%2==0 betyder Non-Premium boards
                {
                    <tr>
                        <td>
                            <img width="100" src="@item.Image)">
                        </td>
                        <td>
                            @item.Name
                        </td>
                        <td>
                            @item.Length
                        </td>
                        <td>
                            @item.Width
                        </td>
                        <td>
                            @item.Thickness
                        </td>
                        <td>
                            @item.Volume L
                        </td>
                        <td>
                            @item.Price
                        </td>
                        <td>
                            @item.Type
                        </td>
                        <td>
                            @for (int i = 0; i < item.Equipment.Count; i++)
                            {
                                if (i == item.Equipment.Count - 1)
                                {
                                    <a>@item.Equipment[i].Name</a>
                                }
                                else
                                {
                                    <a>@item.Equipment[i].Name,</a>
                                }
                            }
                        </td>
                        <td style="text-align: right">
                            @if (IsAdmin())
                            {
                                <a asp-action="Edit" class="btn btn-outline-success" asp-route-id="@item.Id">Ændr</a>
                            }

                            @if (IsAdmin())
                            {
                                <a asp-action="Delete" class="btn btn-outline-danger" asp-route-id="@item.Id">Slet</a>

                            }
                            <a href="Boards/Details/@item.Id" class="btn btn-outline-primary">Detaljer</a>
                            <a asp-action="CreateRental" class="btn btn-outline-primary" asp-route-id="@item.Id">Lej</a>
                        </td>
                    </tr>
                }
            }
        }
    </tbody>
</table>
<div>
    <input type="button" class="btn-lg btn" id="prev" value="Forrige" />
    <label>@CurrentPage</label>
    <input type="button" class="btn-lg btn" id="next" value="Næste" />
</div>

@code {
    private int CurrentPage = 1;
    public List<Board> boards { get; set; } = new();
    public Board board{ get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        boards = await BoardRepo.GetAllFromAPI();
    }

    private bool IsAdmin() 
    {
        /*AuthenticationState state = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        System.Security.Claims.ClaimsPrincipal claims = state.User;
        return claims.IsInRole("Administrators");*/

        return AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name == "Admin"; //LORTE FIX
    }
}